{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CIAO AO Explanation and Validation\n",
    "\n",
    "In this notebook we explain and validate several aspects of CIAO's closed-loop operation. We start by validating the loop, by comparing CIAO's calculations with explicit calculations. Second, we validate CIAO's poke matrix methods by explicitly computing a poke matrix. Finally, we explain and validate the wavefront and residual error calculations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explaining and validating the AO loop\n",
    "\n",
    "Let's start by importing the CIAO modules and config files, as well as the scientific stack. Then we run the simulation check that is executed at the top of every CIAO script."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No module named pypylon\n",
      "No module named ximea\n",
      "[Errno 17] File exists: '.gui_settings'\n"
     ]
    }
   ],
   "source": [
    "import sys,os\n",
    "import ciao_config as ccfg\n",
    "import ciao\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading cached actuator basis set...\n",
      "Loading cached zernike basis set...\n",
      "recording reference\n",
      "sensor paused\n",
      "measurement 1 of 10 Sensor sense method\n",
      "start -> cam.get_image: 50.561 ms\n",
      "cam.get_image -> image stats: 0.448 ms\n",
      "image stats -> estimate background: 0.146 ms\n",
      "estimate background -> centroid: 0.546 ms\n",
      "centroid -> reconstruct wavefront: 0.180 ms\n",
      "reconstruct wavefront -> end sense: 0.001 ms\n",
      "\n",
      "...done\n",
      "measurement 2 of 10 Sensor sense method\n",
      "start -> cam.get_image: 50.116 ms\n",
      "cam.get_image -> image stats: 0.478 ms\n",
      "image stats -> estimate background: 0.141 ms\n",
      "estimate background -> centroid: 0.540 ms\n",
      "centroid -> reconstruct wavefront: 0.173 ms\n",
      "reconstruct wavefront -> end sense: 0.001 ms\n",
      "\n",
      "...done\n",
      "measurement 3 of 10 Sensor sense method\n",
      "start -> cam.get_image: 50.254 ms\n",
      "cam.get_image -> image stats: 0.469 ms\n",
      "image stats -> estimate background: 0.138 ms\n",
      "estimate background -> centroid: 0.538 ms\n",
      "centroid -> reconstruct wavefront: 0.178 ms\n",
      "reconstruct wavefront -> end sense: 0.001 ms\n",
      "\n",
      "...done\n",
      "measurement 4 of 10 Sensor sense method\n",
      "start -> cam.get_image: 49.303 ms\n",
      "cam.get_image -> image stats: 0.476 ms\n",
      "image stats -> estimate background: 0.137 ms\n",
      "estimate background -> centroid: 0.537 ms\n",
      "centroid -> reconstruct wavefront: 0.176 ms\n",
      "reconstruct wavefront -> end sense: 0.001 ms\n",
      "\n",
      "...done\n",
      "measurement 5 of 10 Sensor sense method\n",
      "start -> cam.get_image: 48.455 ms\n",
      "cam.get_image -> image stats: 0.474 ms\n",
      "image stats -> estimate background: 0.138 ms\n",
      "estimate background -> centroid: 0.537 ms\n",
      "centroid -> reconstruct wavefront: 0.175 ms\n",
      "reconstruct wavefront -> end sense: 0.001 ms\n",
      "\n",
      "...done\n",
      "measurement 6 of 10 Sensor sense method\n",
      "start -> cam.get_image: 48.433 ms\n",
      "cam.get_image -> image stats: 0.519 ms\n",
      "image stats -> estimate background: 0.162 ms\n",
      "estimate background -> centroid: 0.557 ms\n",
      "centroid -> reconstruct wavefront: 0.174 ms\n",
      "reconstruct wavefront -> end sense: 0.001 ms\n",
      "\n",
      "...done\n",
      "measurement 7 of 10 Sensor sense method\n",
      "start -> cam.get_image: 48.045 ms\n",
      "cam.get_image -> image stats: 0.513 ms\n",
      "image stats -> estimate background: 0.159 ms\n",
      "estimate background -> centroid: 0.554 ms\n",
      "centroid -> reconstruct wavefront: 0.173 ms\n",
      "reconstruct wavefront -> end sense: 0.001 ms\n",
      "\n",
      "...done\n",
      "measurement 8 of 10 Sensor sense method\n",
      "start -> cam.get_image: 49.008 ms\n",
      "cam.get_image -> image stats: 0.559 ms\n",
      "image stats -> estimate background: 0.172 ms\n",
      "estimate background -> centroid: 0.636 ms\n",
      "centroid -> reconstruct wavefront: 0.181 ms\n",
      "reconstruct wavefront -> end sense: 0.001 ms\n",
      "\n",
      "...done\n",
      "measurement 9 of 10 Sensor sense method\n",
      "start -> cam.get_image: 50.076 ms\n",
      "cam.get_image -> image stats: 0.550 ms\n",
      "image stats -> estimate background: 0.168 ms\n",
      "estimate background -> centroid: 0.628 ms\n",
      "centroid -> reconstruct wavefront: 0.179 ms\n",
      "reconstruct wavefront -> end sense: 0.001 ms\n",
      "\n",
      "...done\n",
      "measurement 10 of 10 Sensor sense method\n",
      "start -> cam.get_image: 49.926 ms\n",
      "cam.get_image -> image stats: 0.541 ms\n",
      "image stats -> estimate background: 0.165 ms\n",
      "estimate background -> centroid: 0.620 ms\n",
      "centroid -> reconstruct wavefront: 0.179 ms\n",
      "reconstruct wavefront -> end sense: 0.001 ms\n",
      "\n",
      "...done\n",
      "reference coordinate error 3.642e-14 px RMS\n",
      "sensor unpaused\n"
     ]
    }
   ],
   "source": [
    "if ccfg.simulate:\n",
    "    sim = ciao.simulator.Simulator()\n",
    "    cam = sim\n",
    "    mirror = cam\n",
    "else:\n",
    "    cam = ciao.cameras.get_camera()\n",
    "    mirror = ciao.mirrors.Mirror()\n",
    "    \n",
    "sensor = ciao.sensors.Sensor(cam)\n",
    "\n",
    "if ccfg.simulate:\n",
    "    # required to remove tip/tilt in simulated image\n",
    "    sensor.record_reference()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(dpi=100)\n",
    "plt.imshow(cam.get_image())\n",
    "plt.colorbar()\n",
    "plt.autoscale(False)\n",
    "for y1,y2,x1,x2 in zip(sensor.search_boxes.y1,\n",
    "                       sensor.search_boxes.y2,\n",
    "                       sensor.search_boxes.x1,\n",
    "                       sensor.search_boxes.x2):\n",
    "    plt.plot([x1,x2-1,x2-1,x1,x1],[y1,y1,y2-1,y2-1,y1],'y-',linewidth=.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sensor sense method\n",
      "start -> cam.get_image: 49.670 ms\n",
      "cam.get_image -> image stats: 0.534 ms\n",
      "image stats -> estimate background: 0.162 ms\n",
      "estimate background -> centroid: 0.612 ms\n",
      "centroid -> reconstruct wavefront: 0.178 ms\n",
      "reconstruct wavefront -> end sense: 0.001 ms\n",
      "\n"
     ]
    }
   ],
   "source": [
    "sensor.sense()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Centroiding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we define the centroiding method explicitly (as opposed to calling CIAO's built-in method). This allows us to see the iterative centroiding algorithm in detail, including the background subtraction step. It also allows us to check the validity of CIAO's output. [CIAO centroiding method](centroid.pyx)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_iterations = ccfg.centroiding_iterations\n",
    "half_width= ccfg.search_box_half_width\n",
    "iterative_step = ccfg.iterative_centroiding_step\n",
    "\n",
    "\n",
    "\n",
    "# an explicit background estimation function\n",
    "# whenever we specify the edges of a region with x1,x2,y1,y2, as\n",
    "# a convention we mean x2 and y2 to be the final column and row in\n",
    "# the region, as opposed to the python idiom making them the first\n",
    "# excluded indices\n",
    "# IMPORTANT: unlike normal Python idiom, y2-y1 no longer indicates\n",
    "# the number of rows, but one less than that number.\n",
    "def estimate_background(spots,x_ref,y_ref,half_width,do_plots=False):\n",
    "    \n",
    "    if do_plots:\n",
    "        plt.figure(dpi=200)\n",
    "        colors = 'gyrm'*100\n",
    "    \n",
    "    # half_width and iterative step should be whole numbers\n",
    "    assert half_width%1==0\n",
    "    \n",
    "    # let's enforce the half width being an integer, so that we\n",
    "    # keep our array indices x1,x2,y1,y2 as integers as well\n",
    "    half_width = int(half_width)\n",
    "    \n",
    "    # we round the reference coordinates to the nearest integer\n",
    "    # so that we compute the center of mass over whole pixels;\n",
    "    # an alternative would be linear interpolation, which would be\n",
    "    # computationally cheap but the code would become complicated\n",
    "    # make sure these are ints too\n",
    "    x,y = int(round(x_ref)),int(round(y_ref))\n",
    "        \n",
    "    # now we have the (inclusive) column and row indices, all ints\n",
    "    x1 = x - half_width\n",
    "    x2 = x + half_width\n",
    "    y1 = y - half_width\n",
    "    y2 = y + half_width\n",
    "    \n",
    "    \n",
    "    # first, survey edges to estimate background\n",
    "    intensity = np.float64(0.0)\n",
    "    counter = np.float64(0.0)\n",
    "    \n",
    "    for xedge in range(x1,x2+1):\n",
    "        intensity = intensity + float(spots[y1,xedge]) + float(spots[y2,xedge])\n",
    "        counter = counter + 2.0\n",
    "        \n",
    "    for yedge in range(y1,y2+1):\n",
    "        intensity = intensity + float(spots[yedge,x1]) + float(spots[yedge,x2])\n",
    "        counter = counter + 2.0\n",
    "\n",
    "    background = intensity/counter\n",
    "    \n",
    "    return background\n",
    "\n",
    "\n",
    "# an explicit centroiding function\n",
    "# whenever we specify the edges of a region with x1,x2,y1,y2, as\n",
    "# a convention we mean x2 and y2 to be the final column and row in\n",
    "# the region, as opposed to the python idiom making them the first\n",
    "# excluded indices\n",
    "# IMPORTANT: unlike normal Python idiom, y2-y1 no longer indicates\n",
    "# the number of rows, but one less than that number.\n",
    "def centroid(spots,x_ref,y_ref,half_width,n_iterations,iterative_step,background,do_plots=False):\n",
    "    \n",
    "    if do_plots:\n",
    "        plt.figure(dpi=100)\n",
    "        colors = 'gyrm'*100\n",
    "    \n",
    "    # half_width and iterative step should be whole numbers\n",
    "    assert half_width%1==0\n",
    "    assert iterative_step%1==0\n",
    "    \n",
    "    # let's enforce the half width being an integer, so that we\n",
    "    # keep our array indices x1,x2,y1,y2 as integers as well\n",
    "    half_width = int(half_width)\n",
    "    iterative_step = int(iterative_step)\n",
    "    \n",
    "    # we round the reference coordinates to the nearest integer\n",
    "    # so that we compute the center of mass over whole pixels;\n",
    "    # an alternative would be linear interpolation, which would be\n",
    "    # computationally cheap but the code would become complicated\n",
    "    # make sure these are ints too\n",
    "    x,y = int(round(x_ref)),int(round(y_ref))\n",
    "            \n",
    "    for k in range(n_iterations):\n",
    "        x1 = x - half_width\n",
    "        x2 = x + half_width\n",
    "        y1 = y - half_width\n",
    "        y2 = y + half_width\n",
    "        \n",
    "        arr = spots[y1:y2+1,x1:x2+1]-background # again, we need the +1 because of Python exclusive indexing\n",
    "        \n",
    "        arr = np.clip(arr,0,np.inf)\n",
    "\n",
    "        ay,ax = arr.shape\n",
    "        if k==0:\n",
    "            # sanity check\n",
    "            assert ax==ay==half_width*2+1\n",
    "            \n",
    "        XX,YY = np.meshgrid(np.arange(ax),np.arange(ay))        \n",
    "        XX = XX + x - half_width\n",
    "        YY = YY + y - half_width\n",
    "        \n",
    "        # the spots image is an int, but now\n",
    "        # we need floating point precision, so convert these to\n",
    "        # floats\n",
    "        x_cent = np.sum(XX*arr).astype(np.float)/np.sum(arr).astype(np.float)\n",
    "        y_cent = np.sum(YY*arr).astype(np.float)/np.sum(arr).astype(np.float)\n",
    "        x,y = int(round(x_cent)),int(round(y_cent))\n",
    "        half_width = half_width - iterative_step\n",
    "\n",
    "        if do_plots:\n",
    "\n",
    "            if k==0:\n",
    "                plt.imshow(spots,cmap='gray')\n",
    "                plt.xlim([x1-1.5,x2+1.5])\n",
    "                plt.ylim([y2+1.5,y1-1.5])\n",
    "                plt.colorbar()\n",
    "                \n",
    "            plt.plot([x1-.5,x2+.5,x2+.5,x1-.5,x1-.5],[y1-.5,y1-.5,y2+.5,y2+.5,y1-.5],'%s-'%colors[k])\n",
    "            plt.autoscale(False)\n",
    "            plt.plot(x_cent,y_cent,'%s.'%colors[k])\n",
    "            \n",
    "    return x_cent,y_cent\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### An example of the centroiding process\n",
    "\n",
    "If we call ```centroid``` with do_plots=True, we'll see the result of the algorithm on a single spot. The green line shows the region used to compute the first iteration, and the yellow line the second iteration. The resulting centroids are plotted as green and yellow dots, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "idx=29\n",
    "x_float = sensor.search_boxes.x[idx]\n",
    "y_float = sensor.search_boxes.y[idx]\n",
    "\n",
    "background = estimate_background(sensor.cam.image,x_float,y_float,half_width)\n",
    "x_cent,y_cent = centroid(sensor.cam.image,x_float,y_float,half_width,n_iterations,iterative_step,background,do_plots=True)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sensor sense method\n",
      "start -> cam.get_image: 50.388 ms\n",
      "cam.get_image -> image stats: 0.534 ms\n",
      "image stats -> estimate background: 0.164 ms\n",
      "estimate background -> centroid: 0.626 ms\n",
      "centroid -> reconstruct wavefront: 0.178 ms\n",
      "reconstruct wavefront -> end sense: 0.001 ms\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Now let's validate CIAO's centroiding by comparing its result with that of our centroiding function\n",
    "\n",
    "# The sense() call below fills the sensor object's x_centroids, y_centroids, and box_backgrounds vectors:\n",
    "sensor.sense()\n",
    "bg_vec = []\n",
    "x_cent_vec = []\n",
    "y_cent_vec = []\n",
    "\n",
    "for k_lenslet in range(sensor.n_lenslets):\n",
    "    x_float = sensor.search_boxes.x[k_lenslet]\n",
    "    y_float = sensor.search_boxes.y[k_lenslet]\n",
    "    bg = estimate_background(sensor.cam.image,x_float,y_float,half_width)\n",
    "    x_cent,y_cent = centroid(sensor.cam.image,x_float,y_float,half_width,n_iterations,iterative_step,bg,do_plots=False)\n",
    "    \n",
    "    bg_vec.append(bg)\n",
    "    #print sensor.box_backgrounds[k_lenslet],bg\n",
    "    x_cent_vec.append(x_cent)\n",
    "    y_cent_vec.append(y_cent)\n",
    "    \n",
    "# Now we compare CIAO's centroids (in sensor.x_centroids and sensor.y_centroids) with those we just\n",
    "# calculated explicitly; and let's do the same for background estimations, in case the error lies there\n",
    "plt.figure(dpi=100)\n",
    "plt.plot(sensor.box_backgrounds, bg_vec-sensor.box_backgrounds,'k.')\n",
    "plt.xlabel('subaperture background estimate (CIAO)')\n",
    "plt.ylabel('background estimate error (CIAO vs explicit)')\n",
    "\n",
    "plt.figure(dpi=100)\n",
    "plt.plot(sensor.x_centroids, x_cent_vec-sensor.x_centroids,'k.')\n",
    "plt.xlabel('subaperture x_centroid (CIAO)')\n",
    "plt.ylabel('x_centroid error (CIAO vs explicit)')\n",
    "\n",
    "plt.figure(dpi=100)\n",
    "plt.plot(sensor.y_centroids, y_cent_vec-sensor.y_centroids,'k.')\n",
    "plt.xlabel('subaperture y_centroid (CIAO)')\n",
    "plt.ylabel('y_centroid error (CIAO vs explicit)')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conclusion\n",
    "\n",
    "The error between our explicit calculations and what CIAO yields is on the order of $10^{-12}$, which is very low. I believe it is due to roundoff errors, possibly increasing with increasing x and y due to accumulation of roundoff error (i.e. in search box coordinates)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculation of local wavefront slope from centroids\n",
    "\n",
    "The next step in the loop is calculation of the wavefront slope from the centers of mass of the spots. Briefly, the reference coordinates are subtracted from the centroids (which are currently expressed in pixels, relative to the reference coordinates), and multiplied by the pixel size to give a physical displacement from reference. This physical displacement is then divided by the focal length of the lenslet to give a slope. This is done for each lenslet, separately for the x and y components of the slope.\n",
    "\n",
    "To begin with, let's write a convenience method that computes all the slopes using our explicit background estimation and centroiding algorithms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_slopes():\n",
    "    spots_image = sensor.cam.image\n",
    "    n_lenslets = sensor.n_lenslets\n",
    "    half_width = ccfg.search_box_half_width\n",
    "    n_iterations = ccfg.centroiding_iterations\n",
    "    iterative_step = ccfg.iterative_centroiding_step\n",
    "    \n",
    "    x_ref,y_ref = sensor.search_boxes.x,sensor.search_boxes.y\n",
    "\n",
    "    x_slope_vec = []\n",
    "    y_slope_vec = []\n",
    "    \n",
    "    for x,y in zip(x_ref,y_ref):\n",
    "        background = estimate_background(spots_image,x,y,half_width)\n",
    "        x_cent,y_cent = centroid(spots_image,x,y,half_width,n_iterations,iterative_step,background)\n",
    "        x_disp,y_disp = x_cent-x,y_cent-y\n",
    "        x_slope = x_disp*ccfg.pixel_size_m/ccfg.lenslet_focal_length_m\n",
    "        y_slope = y_disp*ccfg.pixel_size_m/ccfg.lenslet_focal_length_m\n",
    "        x_slope_vec.append(x_slope)\n",
    "        y_slope_vec.append(y_slope)\n",
    "        \n",
    "        \n",
    "    return np.array(x_slope_vec),np.array(y_slope_vec)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sensor sense method\n",
      "start -> cam.get_image: 49.952 ms\n",
      "cam.get_image -> image stats: 0.529 ms\n",
      "image stats -> estimate background: 0.161 ms\n",
      "estimate background -> centroid: 0.620 ms\n",
      "centroid -> reconstruct wavefront: 0.177 ms\n",
      "reconstruct wavefront -> end sense: 0.001 ms\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sensor.sense()\n",
    "# after CIAO has sensed again, it will have calculated slopes and stored them in \n",
    "# sensor.x_slopes and sensor.y_slopes. Now, let's compare these with the result\n",
    "# of get_slopes--the explicit version\n",
    "\n",
    "x_slopes, y_slopes = get_slopes()\n",
    "x_slopes = x_slopes - np.mean(x_slopes)\n",
    "y_slopes = y_slopes - np.mean(y_slopes)\n",
    "\n",
    "plt.plot(x_slopes,x_slopes-sensor.x_slopes,'ks')\n",
    "plt.plot(y_slopes,y_slopes-sensor.y_slopes,'bo')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Wavefront reconstruction\n",
    "\n",
    "Before we describe closed-loop operation, let's describe the wavefront reconstruction approach. The wavefront $W$ is created by multiplying the slopes $s$ by a matrix $Z^+$. That matrix must be derived from a basis set, i.e. a set of 2D surfaces which can be linearly combined to approximate a real wavefront. In AO for vision science, we typically use the Zernike polynomials. Let's first look at the basic functions of getting Zernike surfaces, the basis set for our problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'x_ref_mat' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-10-e5ce3349aed7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mzernike\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzernike\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZernike\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m# Now, we can get a Zernike surface defined at those points:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0msurf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzernike\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_surface\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx_ref_mat\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m200.\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_ref_mat\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m200.\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'h'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msurf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolorbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'x_ref_mat' is not defined"
     ]
    }
   ],
   "source": [
    "# the zernike module contains two main classes, Zernike and Reconstructor.\n",
    "# Zernike does the generation of polynomials, while Reconstructor's job is\n",
    "# to provide a matrix by which slopes can be converted into a wavefront\n",
    "\n",
    "# First we need a set of coordinates over which to compute the wavefront;\n",
    "# we can use the sensor's reference coordinates:\n",
    "x_ref,y_ref = sensor.search_boxes.x,sensor.search_boxes.y\n",
    "\n",
    "# Put these into a square grid for easier visualization\n",
    "mask = sensor.sensor_mask\n",
    "\n",
    "from ciao.components import zernike\n",
    "zernike = zernike.Zernike()\n",
    "# Now, we can get a Zernike surface defined at those points:\n",
    "surf = zernike.get_surface(1,1,x_ref_mat/200.,y_ref_mat/200.,kind='h',mask=mask)\n",
    "plt.imshow(surf)\n",
    "plt.colorbar()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CIAO centroiding functions, written in Cython, for reference\n",
    "\n",
    "**NB: there's no point in running this code in the notebook, since it has to be compiled into machine language before calling its functions. It's here just for reference.**\n",
    "\n",
    "```python\n",
    "import numpy as np                                                                                                                                                                                          \n",
    "cimport numpy as np                                                                                                                                                                                         \n",
    "from matplotlib import pyplot as plt                                                                                                                                                                        \n",
    "import cython                                                                                                                                                                                               \n",
    "from cython.parallel import prange                                                                                                                                                                          \n",
    "from libc.stdio cimport printf                                                                                                                                                                              \n",
    "import sys,os                                                                                                                                                                                               \n",
    "from sys import exit                                                                                                                                                                                        \n",
    "                                                                                                                                                                                                            \n",
    "# Importing round is failing in windows for some reason; it may have                                                                                                                                        \n",
    "# something to do with the MSVS c compiler and a 32-bit 64-bit clash.                                                                                                                                       \n",
    "# If we want to implement parallelism at some point, we need to figure                                                                                                                                      \n",
    "# this out, because the python round function cannot be used in a                                                                                                                                           \n",
    "# 'with nogil:' context (since it's a python object), but we need some                                                                                                                                      \n",
    "# way to round values and it's risky to write our own c round function                                                                                                                                      \n",
    "# because it might be inefficient compared to clang's version.                                                                                                                                              \n",
    "# from libc.math cimport round as c_round                                                                                                                                                                   \n",
    "                                                                                                                                                                                                            \n",
    "# Changes required to compile parallel version (Linux only):                                                                                                                                                \n",
    "# 1. uncomment the \"from libc.math cimport round as c_round\" line above                                                                                                                                     \n",
    "# 2. change all calls to round below to c_round                                                                                                                                                             \n",
    "# 3. add back the 'with nogil:' context, just above the prange                                                                                                                                              \n",
    "# 4. change range to prange in the outermost loop (the one that iterates                                                                                                                                    \n",
    "#    over the spots                                                                                                                                                                                         \n",
    "                                                                                                                                                                                                            \n",
    "ctypedef np.uint16_t uint16_t                                                                                                                                                                               \n",
    "                                                                                                                                                                                                            \n",
    "# Function compute_centroids:                                                                                                                                                                               \n",
    "# this function takes the following arguments:                                                                                                                                                              \n",
    "# 1. spots_image (int array): the spots image                                                                                                                                                               \n",
    "# 2. sb_x_vec (float array): the x coordinates of search box centers                                                                                                                                        \n",
    "# 3. sb_y_vec (float array): the y coordinates of search box centers                                                                                                                                        \n",
    "# 4. sb_bg_vec (float array): the background values for each search box                                                                                                                                     \n",
    "# 5. sb_half_width (integer): if the width of the search box (inclusive),                                                                                                                                   \n",
    "#    is odd integer N, this is (N-1)//2                                                                                                                                                                     \n",
    "# 6. iterations (integer): the number of centroid iterations, in                                                                                                                                            \n",
    "#    which the search boxes are recentered about the                                                                                                                                                        \n",
    "#    previous center of mass measurement                                                                                                                                                                    \n",
    "# 7. iteration_step_px (integer): the number of pixels by which                                                                                                                                             \n",
    "#    to reduce the search box half-width on each iteration                                                                                                                                                  \n",
    "# 8. x_out (float array): an array in which to store the                                                                                                                                                    \n",
    "#    resulting x coordinates of centers of mass                                                                                                                                                             \n",
    "# 9. y_out (float array): an array in which to store the                                                                                                                                                    \n",
    "#    resulting y coordinates of centers of mass                                                                                                                                                             \n",
    "# 10. mean_intensity (float array): an array in which to store each                                                                                                                                         \n",
    "#    search box's mean intensity                                                                                                                                                                            \n",
    "# 11. maximum_intensity (float array): (ditto)                                                                                                                                                              \n",
    "# 12. minimum_intensity (float array): (ditto)                                                                                                                                                              \n",
    "# 13. num_threads (integer): number of threads to use; currently not                                                                                                                                        \n",
    "#     implemented because it doesn't improve speed. Use of prange may                                                                                                                                       \n",
    "#     not be optimal way to thread this.                                                                                                                                                                    \n",
    "                                                                                                                                                                                                            \n",
    "@cython.boundscheck(False)                                                                                                                                                                                  \n",
    "@cython.wraparound(False)                                                                                                                                                                                   \n",
    "cpdef compute_centroids(np.ndarray[np.int16_t,ndim=2] spots_image,                                                                                                                                          \n",
    "np.ndarray[np.float_t,ndim=1] sb_x_vec,                                                                                                                                                                     \n",
    "np.ndarray[np.float_t,ndim=1] sb_y_vec,                                                                                                                                                                     \n",
    "np.ndarray[np.float_t,ndim=1] sb_bg_vec,                                                                                                                                                                    \n",
    "sb_half_width_p,                                                                                                                                                                                            \n",
    "iterations_p,                                                                                                                                                                                               \n",
    "iteration_step_px_p,                                                                                                                                                                                        \n",
    "np.ndarray[np.float_t,ndim=1] x_out,                                                                                                                                                                        \n",
    "np.ndarray[np.float_t,ndim=1] y_out,                                                                                                                                                                        \n",
    "np.ndarray[np.float_t,ndim=1] mean_intensity,                                                                                                                                                               \n",
    "np.ndarray[np.float_t,ndim=1] maximum_intensity,                                                                                                                                                            \n",
    "np.ndarray[np.float_t,ndim=1] minimum_intensity,                                                                                                                                                            \n",
    "num_threads_p = 1):                                                                                                                                                                                         \n",
    "                                                                                                                                                                                                            \n",
    "                                                                                                                                                                                                            \n",
    "cdef np.int_t n_spots = len(sb_x_vec)                                                                                                                                                                       \n",
    "cdef np.int_t num_threads = int(num_threads_p)                                                                                                                                                              \n",
    "cdef np.int_t iterations = int(iterations_p)                                                                                                                                                                \n",
    "cdef np.int_t iteration_step_px = int(iteration_step_px_p)                                                                                                                                                  \n",
    "cdef np.int_t sb_half_width = int(sb_half_width_p)                                                                                                                                                          \n",
    "                                                                                                                                                                                                            \n",
    "cdef np.float_t intensity                                                                                                                                                                                   \n",
    "cdef np.float_t background                                                                                                                                                                                  \n",
    "cdef np.float_t xprod                                                                                                                                                                                       \n",
    "cdef np.float_t yprod                                                                                                                                                                                       \n",
    "cdef np.int_t x                                                                                                                                                                                             \n",
    "cdef np.int_t x1                                                                                                                                                                                            \n",
    "cdef np.int_t x2                                                                                                                                                                                            \n",
    "cdef np.int_t y                                                                                                                                                                                             \n",
    "cdef np.int_t y1                                                                                                                                                                                            \n",
    "cdef np.int_t y2                                                                                                                                                                                            \n",
    "cdef np.int_t sy                                                                                                                                                                                            \n",
    "cdef np.int_t sx                                                                                                                                                                                            \n",
    "cdef np.int_t half_width                                                                                                                                                                                    \n",
    "cdef np.float_t imax                                                                                                                                                                                        \n",
    "cdef np.float_t imin                                                                                                                                                                                        \n",
    "cdef np.float_t pixel                                                                                                                                                                                       \n",
    "cdef np.float_t counter                                                                                                                                                                                     \n",
    "cdef np.int_t k_iteration                                                                                                                                                                                   \n",
    "cdef np.int_t k_spot                                                                                                                                                                                        \n",
    "                                                                                                                                                                                                            \n",
    "sy = spots_image.shape[0]                                                                                                                                                                                   \n",
    "sx = spots_image.shape[1]                                                                                                                                                                                   \n",
    "                                                                                                                                                                                                            \n",
    "# Populate x_out,y_out with the sb centers, for starters; this allows                                                                                                                                       \n",
    "# us to use the out arrays as places to both read the current sb center                                                                                                                                     \n",
    "# (in the case of multiple iterations, where we want to recenter the                                                                                                                                        \n",
    "# sb on each iteration                                                                                                                                                                                      \n",
    "# This serves an additional purpose--preventing sb_x_vec or sb_y_vec from                                                                                                                                   \n",
    "# being altered; this is critical, as these represent the loop's search box                                                                                                                                 \n",
    "# centers and reference coordinates.                                                                                                                                                                        \n",
    "x_out[:] = sb_x_vec[:]                                                                                                                                                                                      \n",
    "y_out[:] = sb_y_vec[:]                                                                                                                                                                                      \n",
    "                                                                                                                                                                                                            \n",
    "# first, we iterate through the number of iterations                                                                                                                                                        \n",
    "for k_iteration in range(0,iterations):                                                                                                                                                                     \n",
    "                                                                                                                                                                                                            \n",
    "for k_spot in range(n_spots):                                                                                                                                                                               \n",
    "                                                                                                                                                                                                            \n",
    "imin = 2**15                                                                                                                                                                                                \n",
    "imax = -2**15                                                                                                                                                                                               \n",
    "xprod = 0.0                                                                                                                                                                                                 \n",
    "yprod = 0.0                                                                                                                                                                                                 \n",
    "intensity = 0.0                                                                                                                                                                                             \n",
    "counter = 0.0                                                                                                                                                                                               \n",
    "                                                                                                                                                                                                            \n",
    "x1 = int(round(x_out[k_spot]))-sb_half_width+k_iteration*iteration_step_px                                                                                                                                  \n",
    "x2 = int(round(x_out[k_spot]))+sb_half_width-k_iteration*iteration_step_px                                                                                                                                  \n",
    "y1 = int(round(y_out[k_spot]))-sb_half_width+k_iteration*iteration_step_px                                                                                                                                  \n",
    "y2 = int(round(y_out[k_spot]))+sb_half_width-k_iteration*iteration_step_px                                                                                                                                  \n",
    "                                                                                                                                                                                                            \n",
    "if x1<0 or x2>sx-1 or y1<0 or y2>sy-1:                                                                                                                                                                      \n",
    "printf(\"Search box x=(%ld,%ld),y=(%ld,%ld) extends beyond image edge. Possibly search box width too large.\\n\",x1,x2,y1,y2)                                                                                  \n",
    "#exit(0)                                                                                                                                                                                                    \n",
    "                                                                                                                                                                                                            \n",
    "if x1>=x2 or y1>=y2:                                                                                                                                                                                        \n",
    "printf(\"Search box x=(%ld,%ld),y=(%ld,%ld) too small. Possibly search box width too large, number of iterations too high, or iteration step size too high.\\n\",x1,x2,y1,y2)                                  \n",
    "#exit(0)                                                                                                                                                                                                    \n",
    "                                                                                                                                                                                                            \n",
    "background = sb_bg_vec[k_spot]                                                                                                                                                                              \n",
    "#printf(\"background=%0.1f\\n\",background)                                                                                                                                                                    \n",
    "                                                                                                                                                                                                            \n",
    "for x in range(x1,x2+1):                                                                                                                                                                                    \n",
    "for y in range(y1,y2+1):                                                                                                                                                                                    \n",
    "                                                                                                                                                                                                            \n",
    "# not sure if it's better to cast with python's float()                                                                                                                                                     \n",
    "# or c's <float>:                                                                                                                                                                                           \n",
    "pixel = float(spots_image[y,x])-background                                                                                                                                                                  \n",
    "                                                                                                                                                                                                            \n",
    "if pixel<0.0:                                                                                                                                                                                               \n",
    "pixel = 0.0                                                                                                                                                                                                 \n",
    "xprod = xprod + pixel*x                                                                                                                                                                                     \n",
    "yprod = yprod + pixel*y                                                                                                                                                                                     \n",
    "intensity = intensity + pixel                                                                                                                                                                               \n",
    "if pixel<imin:                                                                                                                                                                                              \n",
    "imin = pixel                                                                                                                                                                                                \n",
    "elif pixel>imax:                                                                                                                                                                                            \n",
    "imax = pixel                                                                                                                                                                                                \n",
    "counter = counter + 1.0                                                                                                                                                                                     \n",
    "                                                                                                                                                                                                            \n",
    "if intensity==0 or xprod==0 or yprod==0:                                                                                                                                                                    \n",
    "printf(\"Warning: search box intensity low; skipping.\\n\")                                                                                                                                                    \n",
    "continue                                                                                                                                                                                                    \n",
    "                                                                                                                                                                                                            \n",
    "mean_intensity[k_spot] = intensity/counter                                                                                                                                                                  \n",
    "maximum_intensity[k_spot] = imax                                                                                                                                                                            \n",
    "minimum_intensity[k_spot] = imin                                                                                                                                                                            \n",
    "x_out[k_spot] = xprod/intensity                                                                                                                                                                             \n",
    "y_out[k_spot] = yprod/intensity                                                                                                                                                                             \n",
    "                                                                                                                                                                                                            \n",
    "                                                                                                                                                                                                            \n",
    "# Function estimate_backgrounds:                                                                                                                                                                            \n",
    "# this function takes the following arguments:                                                                                                                                                              \n",
    "# 1. spots_image (int array): the spots image                                                                                                                                                               \n",
    "# 2. sb_x_vec (float array): the x coordinates of search box centers                                                                                                                                        \n",
    "# 3. sb_y_vec (float array): the y coordinates of search box centers                                                                                                                                        \n",
    "# 4. sb_bg_vec (float array): array for writing output                                                                                                                                                      \n",
    "# 5. sb_half_width (integer): if the width of the search box (inclusive)                                                                                                                                    \n",
    "#    is odd integer N, this is (N-1)//2                                                                                                                                                                     \n",
    "                                                                                                                                                                                                            \n",
    "@cython.boundscheck(False)                                                                                                                                                                                  \n",
    "@cython.wraparound(False)                                                                                                                                                                                   \n",
    "cpdef estimate_backgrounds(np.ndarray[np.int16_t,ndim=2] spots_image,                                                                                                                                       \n",
    "np.ndarray[np.float_t,ndim=1] sb_x_vec,                                                                                                                                                                     \n",
    "np.ndarray[np.float_t,ndim=1] sb_y_vec,                                                                                                                                                                     \n",
    "np.ndarray[np.float_t,ndim=1] sb_bg_vec,                                                                                                                                                                    \n",
    "sb_half_width_p):                                                                                                                                                                                           \n",
    "                                                                                                                                                                                                            \n",
    "cdef np.int_t n_spots = len(sb_x_vec)                                                                                                                                                                       \n",
    "cdef np.int_t sb_half_width = int(sb_half_width_p)                                                                                                                                                          \n",
    "                                                                                                                                                                                                            \n",
    "cdef np.float_t intensity                                                                                                                                                                                   \n",
    "cdef np.int_t x                                                                                                                                                                                             \n",
    "cdef np.int_t x1                                                                                                                                                                                            \n",
    "cdef np.int_t x2                                                                                                                                                                                            \n",
    "cdef np.int_t y                                                                                                                                                                                             \n",
    "cdef np.int_t y1                                                                                                                                                                                            \n",
    "cdef np.int_t y2                                                                                                                                                                                            \n",
    "cdef np.int_t sy                                                                                                                                                                                            \n",
    "cdef np.int_t sx                                                                                                                                                                                            \n",
    "cdef np.float_t counter                                                                                                                                                                                     \n",
    "cdef np.int_t k_spot                                                                                                                                                                                        \n",
    "                                                                                                                                                                                                            \n",
    "sy = spots_image.shape[0]                                                                                                                                                                                   \n",
    "sx = spots_image.shape[1]                                                                                                                                                                                   \n",
    "                                                                                                                                                                                                            \n",
    "# first, we iterate through the number of iterations                                                                                                                                                        \n",
    "for k_spot in range(n_spots):                                                                                                                                                                               \n",
    "                                                                                                                                                                                                            \n",
    "intensity = 0.0                                                                                                                                                                                             \n",
    "counter = 0.0                                                                                                                                                                                               \n",
    "                                                                                                                                                                                                            \n",
    "x1 = int(round(sb_x_vec[k_spot]))-sb_half_width                                                                                                                                                             \n",
    "x2 = int(round(sb_x_vec[k_spot]))+sb_half_width                                                                                                                                                             \n",
    "y1 = int(round(sb_y_vec[k_spot]))-sb_half_width                                                                                                                                                             \n",
    "y2 = int(round(sb_y_vec[k_spot]))+sb_half_width                                                                                                                                                             \n",
    "                                                                                                                                                                                                            \n",
    "if x1<0 or x2>sx-1 or y1<0 or y2>sy-1:                                                                                                                                                                      \n",
    "printf(\"Search box x=(%ld,%ld),y=(%ld,%ld) extends beyond image edge. Possibly search box width too large.\\n\",x1,x2,y1,y2)                                                                                  \n",
    "exit(0)                                                                                                                                                                                                     \n",
    "                                                                                                                                                                                                            \n",
    "if x1>=x2 or y1>=y2:                                                                                                                                                                                        \n",
    "printf(\"Search box x=(%ld,%ld),y=(%ld,%ld) too small. Possibly search box width too large, number of iterations too high, or iteration step size too high.\\n\",x1,x2,y1,y2)                                  \n",
    "exit(0)                                                                                                                                                                                                     \n",
    "                                                                                                                                                                                                            \n",
    "for x in range(x1,x2+1):                                                                                                                                                                                    \n",
    "intensity = intensity + float(spots_image[y1,x]) + float(spots_image[y2,x])                                                                                                                                 \n",
    "counter = counter + 2.0                                                                                                                                                                                     \n",
    "for y in range(y1,y2+1):                                                                                                                                                                                    \n",
    "intensity = intensity + float(spots_image[y,x1]) + float(spots_image[y,x2])                                                                                                                                 \n",
    "counter = counter + 2.0                                                                                                                                                                                     \n",
    "                                                                                                                                                                                                            \n",
    "sb_bg_vec[k_spot] = intensity/counter                                                                                                                                                                       \n",
    "                                                                                                                                                                                                            \n",
    "                                                                                                                                                                                                            \n",
    "                                                                                                                                                                                                            \n",
    "@cython.boundscheck(False)                                                                                                                                                                                  \n",
    "@cython.wraparound(False)                                                                                                                                                                                   \n",
    "cpdef fast_centroids(np.ndarray[np.int16_t,ndim=2] spots_image,                                                                                                                                             \n",
    "np.ndarray[np.float_t,ndim=1] sb_x_vec,                                                                                                                                                                     \n",
    "np.ndarray[np.float_t,ndim=1] sb_y_vec,                                                                                                                                                                     \n",
    "sb_half_width_p,                                                                                                                                                                                            \n",
    "centroiding_half_width_p,                                                                                                                                                                                   \n",
    "np.ndarray[np.float_t,ndim=1] x_out,                                                                                                                                                                        \n",
    "np.ndarray[np.float_t,ndim=1] y_out,                                                                                                                                                                        \n",
    "np.ndarray[np.float_t,ndim=1] sb_max_vec,                                                                                                                                                                   \n",
    "np.ndarray[np.int16_t,ndim=1] valid_vec,                                                                                                                                                                    \n",
    "verbose_p = 0,                                                                                                                                                                                              \n",
    "num_threads_p = 1):                                                                                                                                                                                         \n",
    "                                                                                                                                                                                                            \n",
    "\"\"\"Function fast_centroids:                                                                                                                                                                                 \n",
    "this function takes the following arguments:                                                                                                                                                                \n",
    "1. spots_image (int array): the spots image                                                                                                                                                                 \n",
    "2. sb_x_vec (float array): the x coordinates of search box centers                                                                                                                                          \n",
    "3. sb_y_vec (float array): the y coordinates of search box centers                                                                                                                                          \n",
    "4. sb_half_width_p (integer): if the width of the search box (inclusive)                                                                                                                                    \n",
    "is odd integer N, this is (N-1)//2                                                                                                                                                                          \n",
    "5. centroiding_half_width_p: this is the width of the region over which                                                                                                                                     \n",
    "to compute the center of mass; should be at least twice the expected                                                                                                                                        \n",
    "subaperture diffraction-limited spot size (to handle elongation of spots                                                                                                                                    \n",
    "due to axial distribution of retinal reflectors)                                                                                                                                                            \n",
    "6. x_out (float array): an array in which to store the                                                                                                                                                      \n",
    "resulting x coordinates of centers of mass                                                                                                                                                                  \n",
    "7. y_out (float array): an array in which to store the                                                                                                                                                      \n",
    "resulting y coordinates of centers of mass                                                                                                                                                                  \n",
    "8. maximum_intensity (float array): (ditto)                                                                                                                                                                 \n",
    "9. valid_vec (int array): a numpy array with type int16 into which                                                                                                                                          \n",
    "the validity of a centroid is recorded; on output 0 means the                                                                                                                                               \n",
    "measurement was invalid, and 1 means valid                                                                                                                                                                  \n",
    "10. verbose (integer): determines verbosity of debugging messages                                                                                                                                           \n",
    "11. num_threads (integer): number of threads to use; currently not                                                                                                                                          \n",
    "implemented.\"\"\"                                                                                                                                                                                             \n",
    "                                                                                                                                                                                                            \n",
    "cdef int sy                                                                                                                                                                                                 \n",
    "cdef int sx                                                                                                                                                                                                 \n",
    "                                                                                                                                                                                                            \n",
    "sy = spots_image.shape[0]                                                                                                                                                                                   \n",
    "sx = spots_image.shape[1]                                                                                                                                                                                   \n",
    "                                                                                                                                                                                                            \n",
    "# expose memory location of all numpy arrays using typed memoryviews                                                                                                                                        \n",
    "# this improves speed because it removes numpy overhead, and more                                                                                                                                           \n",
    "# importantly it's required for parallelism because we need to put                                                                                                                                          \n",
    "# prange in a 'with nogil:' context                                                                                                                                                                         \n",
    "cdef short [:,:] spots_image_view = spots_image                                                                                                                                                             \n",
    "cdef double [:] sb_x_vec_view = sb_x_vec                                                                                                                                                                    \n",
    "cdef double [:] sb_y_vec_view = sb_y_vec                                                                                                                                                                    \n",
    "cdef double [:] x_out_view = x_out                                                                                                                                                                          \n",
    "cdef double [:] y_out_view = y_out                                                                                                                                                                          \n",
    "cdef double [:] sb_max_vec_view = sb_max_vec                                                                                                                                                                \n",
    "cdef short [:] valid_vec_view = valid_vec                                                                                                                                                                   \n",
    "                                                                                                                                                                                                            \n",
    "cdef int n_spots = len(sb_x_vec)                                                                                                                                                                            \n",
    "cdef int spot_index                                                                                                                                                                                         \n",
    "cdef int sb_half_width_c = sb_half_width_p                                                                                                                                                                  \n",
    "cdef int centroiding_half_width_c = centroiding_half_width_p                                                                                                                                                \n",
    "cdef int verbose_c = verbose_p                                                                                                                                                                              \n",
    "                                                                                                                                                                                                            \n",
    "# declare some variables for the inner loops; don't forget to initialize                                                                                                                                    \n",
    "# on every iteration                                                                                                                                                                                        \n",
    "cdef int y                                                                                                                                                                                                  \n",
    "cdef int x                                                                                                                                                                                                  \n",
    "cdef int max_y                                                                                                                                                                                              \n",
    "cdef int max_x                                                                                                                                                                                              \n",
    "cdef int current_max                                                                                                                                                                                        \n",
    "cdef short pixel                                                                                                                                                                                            \n",
    "                                                                                                                                                                                                            \n",
    "cdef int x1                                                                                                                                                                                                 \n",
    "cdef int x2                                                                                                                                                                                                 \n",
    "cdef int y1                                                                                                                                                                                                 \n",
    "cdef int y2                                                                                                                                                                                                 \n",
    "                                                                                                                                                                                                            \n",
    "cdef double xnum                                                                                                                                                                                            \n",
    "cdef double ynum                                                                                                                                                                                            \n",
    "cdef double denom                                                                                                                                                                                           \n",
    "                                                                                                                                                                                                            \n",
    "# first we have to iterate through the spots; do this without the gil, for                                                                                                                                  \n",
    "# future parallelization                                                                                                                                                                                    \n",
    "#with nogil:                                                                                                                                                                                                \n",
    "# changed this for the time being to prevent linking errors in windows due                                                                                                                                  \n",
    "# to 32-bit libc.math.round being incompatile with 64 bit python. Replacing                                                                                                                                 \n",
    "# 'with nogil:' with 'if True:' to avoid having to unindent everything after.                                                                                                                               \n",
    "if True:                                                                                                                                                                                                    \n",
    "# For parallel version change range to prange                                                                                                                                                               \n",
    "for spot_index in range(n_spots):                                                                                                                                                                           \n",
    "current_max = -2**16+1                                                                                                                                                                                      \n",
    "                                                                                                                                                                                                            \n",
    "# This is how we have to do it if we want nogil and parallelism:                                                                                                                                            \n",
    "#x1 = <int>c_round(sb_x_vec_view[spot_index]-sb_half_width_c)                                                                                                                                               \n",
    "#x2 = <int>c_round(sb_x_vec_view[spot_index]+sb_half_width_c)                                                                                                                                               \n",
    "#y1 = <int>c_round(sb_y_vec_view[spot_index]-sb_half_width_c)                                                                                                                                               \n",
    "#y2 = <int>c_round(sb_y_vec_view[spot_index]+sb_half_width_c)                                                                                                                                               \n",
    "                                                                                                                                                                                                            \n",
    "# This is how we do it (with Python round) to avoid the Windows                                                                                                                                             \n",
    "# problem but this prevents parallelizing:                                                                                                                                                                  \n",
    "x1 = <int>round(sb_x_vec_view[spot_index]-sb_half_width_c)                                                                                                                                                  \n",
    "x2 = <int>round(sb_x_vec_view[spot_index]+sb_half_width_c)                                                                                                                                                  \n",
    "y1 = <int>round(sb_y_vec_view[spot_index]-sb_half_width_c)                                                                                                                                                  \n",
    "y2 = <int>round(sb_y_vec_view[spot_index]+sb_half_width_c)                                                                                                                                                  \n",
    "                                                                                                                                                                                                            \n",
    "if verbose_c>0:                                                                                                                                                                                             \n",
    "printf('cython A %d,%d,%d,%d,%d\\n',spot_index,x1,x2,y1,y2)                                                                                                                                                  \n",
    "                                                                                                                                                                                                            \n",
    "if (x1<0 or x2<0 or x1>sx-1 or x2>sx-1 or                                                                                                                                                                   \n",
    "y1<0 or y2<0 or y1>sy-1 or y2>sy-1):                                                                                                                                                                        \n",
    "printf('centroid.fast_centroids: search box coordinates x=[%d,%d], y=[%d,%d] not valid for spots image with size %dx%d. Check search_box_half_width.\\n',x1,x2,y1,y2,sx,sy)                                  \n",
    "valid_vec_view[spot_index] = 0                                                                                                                                                                              \n",
    "x_out[spot_index] = -1                                                                                                                                                                                      \n",
    "y_out[spot_index] = -1                                                                                                                                                                                      \n",
    "break                                                                                                                                                                                                       \n",
    "                                                                                                                                                                                                            \n",
    "for y in range(y1,y2+1):                                                                                                                                                                                    \n",
    "for x in range(x1,x2+1):                                                                                                                                                                                    \n",
    "pixel = spots_image_view[y,x]                                                                                                                                                                               \n",
    "if pixel>current_max:                                                                                                                                                                                       \n",
    "current_max = pixel                                                                                                                                                                                         \n",
    "max_y = y                                                                                                                                                                                                   \n",
    "max_x = x                                                                                                                                                                                                   \n",
    "                                                                                                                                                                                                            \n",
    "sb_max_vec[spot_index] = current_max                                                                                                                                                                        \n",
    "                                                                                                                                                                                                            \n",
    "# See note abouve about c_round vs round                                                                                                                                                                    \n",
    "# x1 = <int>c_round(max_x-centroiding_half_width_c)                                                                                                                                                         \n",
    "# x2 = <int>c_round(max_x+centroiding_half_width_c)                                                                                                                                                         \n",
    "# y1 = <int>c_round(max_y-centroiding_half_width_c)                                                                                                                                                         \n",
    "# y2 = <int>c_round(max_y+centroiding_half_width_c)                                                                                                                                                         \n",
    "                                                                                                                                                                                                            \n",
    "# Using Python round instead of libc.math.round for                                                                                                                                                         \n",
    "# windows compatibility                                                                                                                                                                                     \n",
    "x1 = <int>round(max_x-centroiding_half_width_c)                                                                                                                                                             \n",
    "x2 = <int>round(max_x+centroiding_half_width_c)                                                                                                                                                             \n",
    "y1 = <int>round(max_y-centroiding_half_width_c)                                                                                                                                                             \n",
    "y2 = <int>round(max_y+centroiding_half_width_c)                                                                                                                                                             \n",
    "                                                                                                                                                                                                            \n",
    "if verbose_c>0:                                                                                                                                                                                             \n",
    "printf('cython B %d,%d,%d,%d,%d\\n',spot_index,x1,x2,y1,y2)                                                                                                                                                  \n",
    "                                                                                                                                                                                                            \n",
    "if (x1<0 or x2<0 or x1>sx-1 or x2>sx-1 or                                                                                                                                                                   \n",
    "y1<0 or y2<0 or y1>sy-1 or y2>sy-1):                                                                                                                                                                        \n",
    "printf('centroid.fast_centroids: centroiding coordinates x=[%d,%d], y=[%d,%d] not valid for spots image with size %dx%d. Check centroiding_half_width.\\n',x1,x2,y1,y2,sx,sy)                                \n",
    "valid_vec_view[spot_index] = 0                                                                                                                                                                              \n",
    "x_out[spot_index] = -1                                                                                                                                                                                      \n",
    "y_out[spot_index] = -1                                                                                                                                                                                      \n",
    "else:                                                                                                                                                                                                       \n",
    "                                                                                                                                                                                                            \n",
    "xnum = 0.0                                                                                                                                                                                                  \n",
    "ynum = 0.0                                                                                                                                                                                                  \n",
    "denom = 0.0                                                                                                                                                                                                 \n",
    "                                                                                                                                                                                                            \n",
    "#printf('box %d x=[%d,%d] y=[%d,%d]\\n',spot_index,x1,x2,y1,y2)                                                                                                                                              \n",
    "for y in range(y1,y2+1):                                                                                                                                                                                    \n",
    "for x in range(x1,x2+1):                                                                                                                                                                                    \n",
    "pixel = spots_image_view[y,x]                                                                                                                                                                               \n",
    "xnum = xnum + <double>(pixel*x)                                                                                                                                                                             \n",
    "ynum = ynum + <double>(pixel*y)                                                                                                                                                                             \n",
    "denom = denom + <double>pixel                                                                                                                                                                               \n",
    "#printf('\\t%d,%d,%0.2f,%0.2f,%0.2f\\n',x,y,xnum,ynum,denom)                                                                                                                                                  \n",
    "                                                                                                                                                                                                            \n",
    "if denom>0:                                                                                                                                                                                                 \n",
    "#printf('%f,%f,%f,\\n',xnum,ynum,denom)                                                                                                                                                                      \n",
    "x_out[spot_index] = xnum/denom                                                                                                                                                                              \n",
    "y_out[spot_index] = ynum/denom                                                                                                                                                                              \n",
    "#printf('%f,%f\\n',x_out[spot_index],y_out[spot_index])                                                                                                                                                      \n",
    "#printf('\\n')                                                                                                                                                                                               \n",
    "valid_vec[spot_index] = 1                                                                                                                                                                                   \n",
    "else:                                                                                                                                                                                                       \n",
    "printf('centroid.fast_centroids: centroiding coordinates x=[%d,%d], y=[%d,%d] produce search box with zero intensity. Check image.\\n',x1,x2,y1,y2,sx,sy)                                                    \n",
    "valid_vec[spot_index] = 0                                                                                                                                                                                   \n",
    "x_out[spot_index] = -1                                                                                                                                                                                      \n",
    "y_out[spot_index] = -1                                                                                                                                                                                      \n",
    "                                                                                                                                                                                                            \n",
    "                                                                                                                                                                                                            \n",
    "return 1                                                                                                                                                                                                    \n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
